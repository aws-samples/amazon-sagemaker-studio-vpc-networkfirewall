# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: Creates SageMaker Studio domain and user profile for the SageMaker Studio

Parameters:
  DomainName:
    Type: String
  UserProfileName:
    Type: String
  VpcId:
    Type: String
  SageMakerStudioSubnetIds:
    Type: String
  SageMakerSecurityGroupIds:
    Type: String
  SageMakerExecutionRoleArn:
    Type: String
  
Resources:
# Custom resources to create SageMaker Studio domain and user profile

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchLogsPermissions
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
              - Sid: SageMakerDomainPermission
                Effect: Allow
                Action:
                  - sagemaker:CreateDomain
                  - sagemaker:DescribeDomain
                  - sagemaker:DeleteDomain
                  - sagemaker:UpdateDomain
                  - sagemaker:CreateUserProfile
                  - sagemaker:UpdateUserProfile
                  - sagemaker:DeleteUserProfile
                  - sagemaker:DescribeUserProfile
                  - sagemaker:ListApps
                  - sagemaker:DeleteApp
                Resource:
                  - !Sub "arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:domain/*"
                  - !Sub "arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:user-profile/*"
                  - !Sub "arn:${AWS::Partition}:sagemaker:${AWS::Region}:${AWS::AccountId}:app/*"
              - Sid: SageMakerExecPassRole
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Ref SageMakerExecutionRoleArn

  SageMakerDomainLambda:
      Type: "AWS::Lambda::Function"
      DependsOn:
        - LambdaExecutionRole
      Properties:
        Code:
          ZipFile: !Sub |
            import time
            import boto3
            import logging
            import cfnresponse
            from botocore.exceptions import ClientError

            sm_client = boto3.client('sagemaker')
            logger = logging.getLogger(__name__)

            SAGEMAKER_DOMAIN_AUTH_MODE = 'IAM'
            SAGEMAKER_NETWORK_ACCESS_TYPE = 'VpcOnly'
            SAGEMAKER_EFS_RETENTION_POLICY = 'Delete'

            def delete_domain(domain_id):
                try:
                    sm_client.describe_domain(DomainId=domain_id)
                except:
                    return

                sm_client.delete_domain(DomainId=domain_id,RetentionPolicy={'HomeEfsFileSystem': SAGEMAKER_EFS_RETENTION_POLICY})

                try:
                    while sm_client.describe_domain(DomainId=domain_id):
                        time.sleep(5)
                except ClientError as error:
                    if error.response['Error']['Code'] == 'ResourceNotFound':
                        logger.info(f'SageMaker domain {domain_id} has been deleted')
                        return

            def handler(event, context):
                response_data = {}
                physicalResourceId = event.get('PhysicalResourceId')
                config = event.get('ResourceProperties')

                try:
                    if event['RequestType'] in ['Create', 'Update']:
                        if event['RequestType'] == 'Create':
                            physicalResourceId = sm_client.create_domain(
                                            DomainName=config['DomainName'],
                                            AuthMode=SAGEMAKER_DOMAIN_AUTH_MODE,
                                            DefaultUserSettings=config['DefaultUserSettings'],
                                            SubnetIds=config['SageMakerStudioSubnetIds'].split(','),
                                            VpcId=config['VpcId'],
                                            AppNetworkAccessType=SAGEMAKER_NETWORK_ACCESS_TYPE
                                        )['DomainArn'].split('/')[-1]

                            logger.info(f'Created SageMaker Studio Domain:{physicalResourceId}')
                        else:
                            sm_client.update_domain(DomainId=physicalResourceId, DefaultUserSettings=config['DefaultUserSettings'])

                        while sm_client.describe_domain(DomainId=physicalResourceId)['Status'] != 'InService':
                            time.sleep(5)

                        response_data = {'DomainId': physicalResourceId}

                    elif event['RequestType'] == 'Delete':
                        delete_domain(physicalResourceId)

                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId=physicalResourceId)

                except ClientError as exception:
                    logging.error(exception)
                    cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physicalResourceId=physicalResourceId, reason=str(exception))
        Description: Creates, updates or deletes SageMaker domain
        Handler: index.handler
        MemorySize: 128
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.8
        Timeout: 900

  UserProfileLambda:
      Type: "AWS::Lambda::Function"
      DependsOn:
        - LambdaExecutionRole
        - SageMakerDomainLambdaInvoke
      Properties:
        Code:
          ZipFile: !Sub |
            import time
            import boto3
            import logging
            import cfnresponse
            from botocore.exceptions import ClientError

            sm_client = boto3.client('sagemaker')
            logger = logging.getLogger(__name__)

            def delete_user_profile(config):    
                domain_id = config['DomainId']
                user_profile_name = config['UserProfileName']
                logging.info(f'Start deleting user profile: {user_profile_name}')

                try:
                    sm_client.describe_user_profile(DomainId=domain_id, UserProfileName=user_profile_name)
                except:
                    logging.info(f'Cannot retrieve {user_profile_name}')
                    return

                for p in sm_client.get_paginator('list_apps').paginate(DomainIdEquals=domain_id, UserProfileNameEquals=user_profile_name):
                    for a in p['Apps']:
                        if a['Status'] != 'Deleted':
                            sm_client.delete_app(DomainId=a['DomainId'], UserProfileName=a['UserProfileName'], AppType=a['AppType'], AppName=a['AppName'])
                    
                apps = 1
                while apps:
                    apps = 0
                    for p in sm_client.get_paginator('list_apps').paginate(DomainIdEquals=domain_id, UserProfileNameEquals=user_profile_name):
                        apps += len([a['AppName'] for a in p['Apps'] if a['Status'] != 'Deleted'])
                    logging.info(f'Number of active apps: {str(apps)}')
                    time.sleep(5)

                sm_client.delete_user_profile(DomainId=domain_id, UserProfileName=user_profile_name)

                try:
                    while sm_client.describe_user_profile(DomainId=domain_id, UserProfileName=user_profile_name):
                        time.sleep(5)
                except ClientError as error:
                    if error.response['Error']['Code'] == 'ResourceNotFound':
                        logger.info(f'{user_profile_name} deleted')
                        return

            def handler(event, context):
                response_data = {}
                physicalResourceId = event.get('PhysicalResourceId')
                config = event.get('ResourceProperties')

                try:
                    if event['RequestType'] in ['Create', 'Update']:
                        f = sm_client.update_user_profile
                        if event['RequestType'] == 'Create':
                            f = sm_client.create_user_profile

                        response = f(DomainId=config['DomainId'], UserProfileName=config['UserProfileName'], UserSettings=config['UserSettings'])

                        while response.get('Status') != 'InService':
                            response = sm_client.describe_user_profile(DomainId=config['DomainId'], UserProfileName=config['UserProfileName'])
                            time.sleep(5)
                        
                        response_data = {'UserProfileName':response['UserProfileName']}
                        physicalResourceId = response['UserProfileName']
              
                    elif event['RequestType'] == 'Delete':        
                        delete_user_profile(config)

                    cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId=physicalResourceId)

                except ClientError as exception:
                    logging.error(exception)
                    cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physicalResourceId=physicalResourceId, reason=str(exception))
        Description: Creates, udpates or deletes SageMaker user profile
        Handler: index.handler
        MemorySize: 128
        Role: !GetAtt LambdaExecutionRole.Arn
        Runtime: python3.8
        Timeout: 900

  SageMakerDomainLambdaInvoke:
    Type: Custom::LambdaInvoke
    DependsOn:
      - SageMakerDomainLambda
    Properties:
      ServiceToken: !GetAtt SageMakerDomainLambda.Arn
      DomainName: !Ref DomainName
      VpcId: !Ref VpcId
      SageMakerStudioSubnetIds: !Ref SageMakerStudioSubnetIds
      DefaultUserSettings:
        SecurityGroups: 
          - !Ref SageMakerSecurityGroupIds
        ExecutionRole: !Ref SageMakerExecutionRoleArn
  
  UserProfileLambdaInvoke:
    Type: Custom::LambdaInvoke
    DependsOn:
      - UserProfileLambda
    Properties:
      ServiceToken: !GetAtt UserProfileLambda.Arn
      UserProfileName: !Ref UserProfileName
      DomainId: !GetAtt SageMakerDomainLambdaInvoke.DomainId
      UserSettings:
        ExecutionRole: !Ref SageMakerExecutionRoleArn

Outputs:
  SageMakerStudioDomainId:
    Description: SageMaker Studio domain id
    Value: !GetAtt SageMakerDomainLambdaInvoke.DomainId
  UserProfileName:
    Description: SageMaker user profile name
    Value: !Ref UserProfileName
